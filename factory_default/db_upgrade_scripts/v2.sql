ALTER TABLE "radius_users" ADD COLUMN additional_settings text;
ALTER TABLE "wireless_routers" ADD COLUMN additional_settings text;
CREATE TABLE IF NOT EXISTS "freeradius_configs" ("config_name" TEXT, "value" TEXT);
INSERT INTO freeradius_configs (config_name, value) VALUES ("eap", "");
update system_setting set value='2.0' where system_setting='version';